package com.enocaProject.demo.services.concretes;




import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.enocaProject.demo.dto.CompanyDTO;
import com.enocaProject.demo.entities.Company;
import com.enocaProject.demo.repository.CompanyRepository;
import com.enocaProject.demo.services.abstracts.ICompanyService;


@Service
public class CompanyManager implements ICompanyService {

	
	private CompanyRepository companyRepository;
	private ModelMapper modelMapper;
	
	@Autowired
	public CompanyManager(CompanyRepository companyRepository, ModelMapper modelMapper) {
		this.companyRepository = companyRepository;
		this.modelMapper = modelMapper;
		
	}
	
	
	
	
			
	





	@Override
	public List<Company> getAllCompany() {
		// TODO Auto-generated method stub
		return null;
	}





	@Override
	public CompanyDTO createCompany(CompanyDTO companyDTO) {
		// TODO Auto-generated method stub
		return null;
	}





	@Override
	public CompanyDTO updateCompany(Long id, CompanyDTO companyDTO) {
		// TODO Auto-generated method stub
		return null;
	}





	@Override
	public Company delete(Long id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	//Convert Entity into DTO
		private CompanyDTO mapToDTO(Company company) {
			CompanyDTO companyDTO = new CompanyDTO();
			companyDTO.setCompany_id(company.getCompany_id());
			companyDTO.setCompany_name(company.getCompany_name());
	        companyDTO.setEmployees(company.getEmployees());
			
			return companyDTO;
		}
		
		
		//Convert DTO to Entity
		private Company mapToEntity(CompanyDTO companyDTO) {
			Company company = new Company();
			company.setCompany_name(companyDTO.getCompany_name());
			company.setEmployees(companyDTO.getEmployees());
			
			return company;
		}
	
	/*@Override
	public List<Company> getAll() {
		
		return this.companyRepository.findAll();
	}

	@Override
	public Company add(Company company)   {
		
		return this.companyRepository.save(company);
		
	}

	@Override
	public Company update(Long id, Company company) {
		
		
		
		Optional<Company> companyList = this.companyRepository.findById(id);
		Company addCompany = new Company();
		
		if(companyList.isPresent()) {
			Company company1 = companyList.get();
			this.companyRepository.deleteById(company1.getCompany_id());
			addCompany.setCompany_id(company.getCompany_id());
			addCompany.setCompany_name(company.getCompany_name());
			addCompany.setEmployees(company.getEmployees());
			this.companyRepository.save(addCompany);
			return addCompany;
		}else {
			return null;
		}
		
	  
	  
	}



	@Override
	public Company delete(Long id) {
		Optional<Company> foundCompany = this.companyRepository.findById(id);
		
		if (foundCompany.isPresent()) {
			Company company1 = foundCompany.get();
			this.companyRepository.deleteById(company1.getCompany_id());
			return company1;
		} else {
			return null;
		}
				
			}*/
			
			
		
		
	}



	
    
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

